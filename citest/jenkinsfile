#!groovy

pipeline {  
  agent none	// force each stage to have an agent

  //environment {
      // DOCKER_IMAGE_TAG = "my-app:build-${env.BUILD_ID}"
  //}
	
  stages {
  
    stage('Maven Install') {
	//agent any    
      agent {
        docker {
          image 'maven:3.5.0'
	  //image 'maven:3-alpine'
	  //args '-v $HOME/.m2:/root/.m2' // mount volume -> will cache ~/.m2  between pipeline runs using the maven container
        }
      }
      steps {
        //sh '/var/lib/maven/bin/mvn -f citest/pom.xml clean package -U'
	  sh 'mvn -f citest/pom.xml clean package -U'	  
      }       
	    
	post {
	  success{
	    publishHTML target: [
              allowMissing: false,
              alwaysLinkToLastBuild: false,
              keepAll: true,
              reportDir: '',
              reportFiles: 'index.html',
              reportName: 'RCov Report'
            ]
	  }
          always {
            junit 'citest/target/surefire-reports/*.xml'	    
          }    
        }
    } 
    stage('Docker Build') {
      agent any
      steps {
        sh 'docker build -t localhost:5000/citest:latest citest --rm'
	//sh 'docker build -t citest:latest citest --rm'
      }    
    }
    stage('Docker Push') {
      agent any
      steps {
        //withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
        //  sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
           sh 'docker push localhost:5000/citest:latest'
	   //sh 'docker push citest:latest'
        //}
      }
    }
    
	  
    stage('Docker Teardown') {
      agent any
      steps {
	script {
          try {
            //sh 'exit 1'
	    sh 'docker rm $(docker stop $(docker ps -a -q --filter name=iTest))'
          }catch (exc) {
            echo 'nothing to stop: docker image iTest not running!'
            //throw
          }
	}
      }
    }   		
	  
    stage('Docker Launch') {
      agent any
      steps {
        //sh 'docker run --name iTest --network host -p 8082:8080 -d localhost:5000/citest:latest' 
	 sh 'IT_HOST_IP=`ip -4 addr show scope global dev docker0 | grep inet | awk '{print $2}' | cut -d / -f 1`'
	 sh 'docker run --name iTest --add-host outsidehost:$IT_HOST_IP -d localhost:5000/citest:latest'        
	  //sh 'docker run --name iTest -p 8082:8080 -d citest:latest'        
      }
    }
	  		
    stage('Integration Test'){
	agent any
	//agent {
        //  docker {
        //    image 'maven:3.5.0'
        //  }
        //}
        //when {
        //    environment name: 'run_test_only', value: 'yes'
        //}
        steps{
        //    sh '/var/lib/maven/bin/mvn -f citest/pom.xml verify' 	//use local maven 
		build job: 'citest-it', quietPeriod: 10
        }
	//post {
        //  always {
            //junit 'citest-it/target/failsafe-reports/*.xml'         		  
        //  }    
        //}	
    }	  	  
  }  
	
}
