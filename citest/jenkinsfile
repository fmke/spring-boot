#!groovy

pipeline {  
  agent none	# force each stage to have an agent

  environment {
      # DOCKER_IMAGE_TAG = "my-app:build-${env.BUILD_ID}"
  }
	
  stages {
    stage('Maven Install') {
      agent {
        docker {
          image 'maven:3.5.0'
        }
      }
      steps {
        sh 'mvn -f citest/pom.xml clean package -U'
      }
    } 
    stage('Docker Build') {
      agent any
      steps {
        sh 'docker build -t localhost:5000/citest:latest citest --rm'
      }    
    }
    stage('Docker Push') {
      agent any
      steps {
        //withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
        //  sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
           sh 'docker push localhost:5000/citest:latest'
        //}
      }
    }
	
	stage('Docker Launch') {
      agent any
      steps {
        sh 'docker run --name iTest -p 8080:8080 -d localhost:5000/citest:latest'        
      }
    }
	  		
	stage('Test'){
        //when {
        //    environment name: 'run_test_only', value: 'yes'
        //}
        steps{
            sh 'cd citest && mvn verify' 	//use local maven 
        }
    }
    
    stage('Docker Teardown') {
      agent any
      steps {
        sh 'docker rm $(docker stop $(docker ps -a -q --filter name=iTest))'        
      }
    }
    
    post {
      always {
        junit 'citeset/target/surefire-reports/*.xml'
        junit 'citeset/target/failsafe-reports/*.xml'
      }
   	}	 
  }  
}
